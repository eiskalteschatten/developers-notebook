{% block editorcontent %}
    <div class="content-three-columns">
        <div class="first-column">
            <div class="toolbar">
                <div class="toolbar-content">
                    <a href="#!" onclick="createFolder()" title="Create a new folder">+</a><a href="#!" onclick="removeFolder()" title="Remove selected folder">&ndash;</a>
                </div>
            </div>
            <div class="column-content">
				<div class="editor-folders">
                	<div class="editor-folder all-projects-folders" data-id="-1">
                		All
                	</div>
                </div>
                <div class="section-label">Projects</div>
                <div class="editor-folders projects">
					{% for project in projects %}
			            <div class="editor-folder" data-id="{{ project.id }}">
			            	{{ project.name }}
			            </div>
					{% endfor %}
                </div>
                
                <div class="section-label">Folders</div>
                <div class="editor-folders folders">
                	{% for folder in folders %}
			            <div class="editor-folder folder" data-id="{{ folder.id }}">
			            	{{ folder.name }}
			            </div>
					{% endfor %}
                </div>
            </div>
        </div>
        <div class="second-column">
            <div class="toolbar">
                <div class="toolbar-content">
                    <a href="#!" onclick="createPage()" title="Create a new page">+</a><a href="#!" onclick="removePage()" title="Delete selected page">&ndash;</a>
                </div>
            </div>
            <div class="editor-pages">
	            {% for page in pages %}
		            <div class="editor-page" data-id="{{ page.id }}" data-syntax="{{ page.syntax }}" data-folder="{{ page.folder }}" data-project="{{ page.project }}">
		            	<div class="preview">{{ page.previewContent }}</div>
		            	<div class="date">{{ page.date }}</div>
		            	<div class="content">{{ page.content }}</div>
		            </div>
				{% endfor %}
            </div>
        </div>
        <div class="third-column editor-container">
            <div class="toolbar">
                <div class="toolbar-content">
                    <div class="toolbar-section">
                        <a href="#!" onclick="toggleFullScreen(this)" title="Toggle full screen">&#8598;</a>
                    </div>
                    <div class="toolbar-section">
                        <a href="#!" onclick="savePage()" title="Save"><img src="{{ asset('resources/img/save.svg') }}"></a>
                    </div>
                    <div class="toolbar-section">
                        <a href="#!" onclick="toggleInvisibles(this)" title="Toggle invisible characters">&para;</a><a href="#!" onclick="toggleIndentGuides(this)" title="Toggle indent guides">&#8674;</a><a href="#!" onclick="toggleReadOnly(this)" title="Toggle read only"><img src="{{ asset('resources/img/lock.svg') }}"><!-- &#10007; --></a>
                    </div>
                    <div class="toolbar-section">
                        <a href="#!" onclick="undo()" title="Undo">&#8634;</a><a href="#!" onclick="redo()" title="Redo">&#8635;</a>
                    </div>
                    <div class="toolbar-section">
                        <a href="#!" onclick="toggleFindReplace(this)" title="Toggle find and replace toolbar"><img src="{{ asset('resources/img/magnifying-glass.svg') }}"></a>
                    </div>
                    <div class="toolbar-section no-line">
                        <label for="scrollToLine">Line #</label><input type="text" id="scrollToLine" onchange="scrollToLine(this)">
                    </div>
                    <div class="right">
                        <div class="toolbar-section">
                            <span id="rowPos"></span>:<span id="colPos"></span>
                        </div>
                        <select onchange="changeMode(this)" id="mode" style="margin-left: 8px;">
                            <option value="abap">ABAP</option><option value="actionscript">ActionScript</option><option value="ada">ADA</option><option value="apache_conf">Apache Conf</option><option value="asciidoc">AsciiDoc</option><option value="assembly_x86">Assembly x86</option><option value="autohotkey">AutoHotKey</option><option value="batchfile">BatchFile</option><option value="c9search">C9Search</option><option value="c_cpp">C/C++</option><option value="cirru">Cirru</option><option value="clojure">Clojure</option><option value="cobol">Cobol</option><option value="coffee">CoffeeScript</option><option value="coldfusion">ColdFusion</option><option value="csharp">C#</option><option value="css">CSS</option><option value="curly">Curly</option><option value="d">D</option><option value="dart">Dart</option><option value="diff">Diff</option><option value="dot">Dot</option><option value="erlang">Erlang</option><option value="ejs">EJS</option><option value="forth">Forth</option><option value="ftl">FreeMarker</option><option value="gherkin">Gherkin</option><option value="glsl">Glsl</option><option value="golang">Go</option><option value="groovy">Groovy</option><option value="haml">HAML</option><option value="handlebars">Handlebars</option><option value="haskell">Haskell</option><option value="haxe">haXe</option><option value="html">HTML</option><option value="html_ruby">HTML (Ruby)</option><option value="ini">INI</option><option value="jack">Jack</option><option value="jade">Jade</option><option value="java">Java</option><option value="javascript">JavaScript</option><option value="json">JSON</option><option value="jsoniq">JSONiq</option><option value="jsp">JSP</option><option value="jsx">JSX</option><option value="julia">Julia</option><option value="latex">LaTeX</option><option value="less">LESS</option><option value="liquid">Liquid</option><option value="lisp">Lisp</option><option value="livescript">LiveScript</option><option value="logiql">LogiQL</option><option value="lsl">LSL</option><option value="lua">Lua</option><option value="luapage">LuaPage</option><option value="lucene">Lucene</option><option value="makefile">Makefile</option><option value="matlab">MATLAB</option><option value="markdown">Markdown</option><option value="mel">MEL</option><option value="mysql">MySQL</option><option value="mushcode">MUSHCode</option><option value="nix">Nix</option><option value="objectivec">Objective-C</option><option value="ocaml">OCaml</option><option value="pascal">Pascal</option><option value="perl">Perl</option><option value="pgsql">pgSQL</option><option value="php">PHP</option><option value="powershell">Powershell</option><option value="prolog">Prolog</option><option value="properties">Properties</option><option value="protobuf">Protobuf</option><option value="python">Python</option><option value="r">R</option><option value="rdoc">RDoc</option><option value="rhtml">RHTML</option><option value="ruby">Ruby</option><option value="rust">Rust</option><option value="sass">SASS</option><option value="scad">SCAD</option><option value="scala">Scala</option><option value="smarty">Smarty</option><option value="scheme">Scheme</option><option value="scss">SCSS</option><option value="sh">SH</option><option value="sjs">SJS</option><option value="space">Space</option><option value="snippets">snippets</option><option value="soy_template">Soy Template</option><option value="sql">SQL</option><option value="stylus">Stylus</option><option value="svg">SVG</option><option value="tcl">Tcl</option><option value="tex">Tex</option><option value="text">Text</option><option value="textile">Textile</option><option value="toml">Toml</option><option value="twig">Twig</option><option value="typescript">Typescript</option><option value="vbscript">VBScript</option><option value="velocity">Velocity</option><option value="verilog">Verilog</option><option value="xml">XML</option><option value="xquery">XQuery</option><option value="yaml">YAML</option>
                        </select>
                        <a href="#!" onclick="openPopup('editorOptions')" title="Show more editor options"><img src="{{ asset('resources/img/gear.svg') }}"></a>
                    </div>
                </div>
            </div>
            <div class="subtoolbar" id="findReplaceToolbar">
                <div class="toolbar-content">
                    <input type="text" id="findText" placeholder="Find">
                    <a href="#!" onclick="findPrev()" title="Previous">&#8592;</a><a href="#!" onclick="findNext()" title="Next">&#8594;</a>
                    <input type="text" id="replaceText" placeholder="Replace" style="margin-left: 20px;">
                    <a href="#!" onclick="replaceText()" title="Replace" class="auto">Replace</a><a href="#!" onclick="replaceAllText()" title="All" class="auto">All</a>
                    <a href="#!" onclick="openPopup('findReplaceOptions')" title="Show more find and replace options"><img src="{{ asset('resources/img/gear.svg') }}"></a>
                </div>
            </div>
            <div class="editor-wrapper">
                <div id="editor"></div>
            </div>
        </div>
    </div>


    <div class="popup" id="editorOptions">
        <div class="popup-content" style="width: 350px;">
            <div class="close"><a href="#!" onclick="closePopup()">X</a></div>
            <div class="title">Editor Options</div>
            <div class="clear-both"></div>
            <div>Editor Theme:</div>
            <select onchange="changeTheme(this)" id="theme">
                <optgroup label="Bright"><option value="ace/theme/chrome">Chrome</option><option value="ace/theme/clouds">Clouds</option><option value="ace/theme/crimson_editor">Crimson Editor</option><option value="ace/theme/dawn">Dawn</option><option value="ace/theme/dreamweaver">Dreamweaver</option><option value="ace/theme/eclipse">Eclipse</option><option value="ace/theme/github">GitHub</option><option value="ace/theme/solarized_light">Solarized Light</option><option value="ace/theme/textmate">TextMate</option><option value="ace/theme/tomorrow">Tomorrow</option><option value="ace/theme/xcode">XCode</option><option value="ace/theme/kuroir">Kuroir</option><option value="ace/theme/katzenmilch">KatzenMilch</option></optgroup><optgroup label="Dark"><option value="ace/theme/ambiance">Ambiance</option><option value="ace/theme/chaos">Chaos</option><option value="ace/theme/clouds_midnight">Clouds Midnight</option><option value="ace/theme/cobalt">Cobalt</option><option value="ace/theme/idle_fingers">idle Fingers</option><option value="ace/theme/kr_theme">krTheme</option><option value="ace/theme/merbivore">Merbivore</option><option value="ace/theme/merbivore_soft">Merbivore Soft</option><option value="ace/theme/mono_industrial">Mono Industrial</option><option value="ace/theme/monokai">Monokai</option><option value="ace/theme/pastel_on_dark">Pastel on dark</option><option value="ace/theme/solarized_dark">Solarized Dark</option><option value="ace/theme/terminal">Terminal</option><option value="ace/theme/tomorrow_night">Tomorrow Night</option><option value="ace/theme/tomorrow_night_blue">Tomorrow Night Blue</option><option value="ace/theme/tomorrow_night_bright">Tomorrow Night Bright</option><option value="ace/theme/tomorrow_night_eighties">Tomorrow Night 80s</option><option value="ace/theme/twilight">Twilight</option><option value="ace/theme/vibrant_ink">Vibrant Ink</option></optgroup>
            </select><br>
            <input type="checkbox" id="highlightActiveLine" onclick="toggleHighlightActiveLine()"><label for="highlightActiveLine">Highlight active line</label><br>
            <div class="buttons">
                <button onclick="">Set as default configuration</button><button onclick="saveEditorOptions()">Save changes</button><button onclick="cancelOptions(this)">Cancel</button>
            </div>
        </div>
    </div>

    <div class="popup" id="findReplaceOptions">
        <div class="popup-content" style="width: 350px;">
            <div class="close"><a href="#!" onclick="closePopup()">X</a></div>
            <div class="title">Find and Replace Options</div>
            <div class="clear-both"></div>
            <input type="checkbox" id="wrapSearch"><label for="wrapSearch">Wrap search</label><br>
            <input type="checkbox" id="caseSensitive"><label for="caseSensitive">Case sensitive</label><br>
            <input type="checkbox" id="wholeWord"><label for="wholeWord">Match whole words only</label><br>
            <input type="checkbox" id="regExp"><label for="regExp">Search is a regular expression</label><br>
            <input type="checkbox" id="skipCurrent"><label for="skipCurrent">Skip current line</label>
            <div class="buttons">
                <button onclick="saveFindReplaceOptions()">Save changes</button><button onclick="cancelOptions(this)">Cancel</button>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="{{ asset('resources/js/ace/ace.js') }}"></script>

    <script type="text/javascript">
        var defaultTheme = "ace/theme/chrome";
        //var defaultTheme = "ace/theme/clouds_midnight";
        var defaultMode = "{{ defaultMode }}";

        var editor = ace.edit("editor");
        editor.setTheme(defaultTheme);
        editor.getSession().setMode("ace/mode/"+defaultMode);
        editor.setDisplayIndentGuides(false);
        editor.session.selection.on("changeCursor", function(e) {
            getCursorPosition();
        });

        $(document).ready(function() {
            $('#theme option[value="'+defaultTheme+'"]').prop('selected', true);
            $('#mode option[value="'+defaultMode+'"]').prop('selected', true);

            getCursorPosition();
            
            $('.editor-folder').click(function() {
        		selectFolder($(this));
        	});
        	
        	$('.all-projects-folders').trigger('click');
            
            $('.editor-page').click(function() {
        		selectPage($(this));
        	});
        	
			$('.editor-page:visible:first').trigger('click');
        });

        function changeTheme(select) {
            var theme = $(select).val();
            editor.setTheme(theme);
        }

        function changeMode(select) {
            var mode = $(select).val();
            editor.getSession().setMode("ace/mode/"+mode);
            
			$('.editor-page.selected').attr('data-syntax', mode);
        }

        function toggleToolbarOptions(button, closeButton) {
            if (!closeButton) {
                var options = $(button).parents().siblings('.toolbar-options');
            }
            else {
                var options = $(button).parents('.toolbar-options');
            }

            if (options.css('display') == "none") {
                var position = $(button).position();

                options.css('left', position.left - 510);
                options.css('top', position.top + 35);

                options.show();
                options.stop().animate({opacity: 1}, 200, function() {
                    $('.popup-close-layer').click(function() {
                        toggleToolbarOptions(button, closeButton);
                    })
                    $('.popup-close-layer').show();
                });
            }
            else {
                $('.popup-close-layer').hide();
                options.stop().animate({opacity: 0}, 200, function() {
                    $(this).hide();
                });
            }
        }

        function getCursorPosition() {
            var position = editor.getCursorPosition();
            $('#rowPos').text(position.row);
            $('#colPos').text(position.column);
        }

        function toggleFullScreen(button) {
            if ($('.editor-container').hasClass('full-screen')) {
                $('.editor-container').removeClass('full-screen');
                $(button).html('&#8598;');
            }
            else {
                $('.editor-container').addClass('full-screen');
                $(button).html('&#8600;');
            }
        }

        function toggleInvisibles(button) {
            if (editor.getShowInvisibles()) {
                editor.setShowInvisibles(false);
                $(button).removeClass('selected');
            }
            else {
                editor.setShowInvisibles(true);
                $(button).addClass('selected');
            }
        }

        function undo() {
            editor.undo();
        }

        function redo() {
            editor.redo();
        }

        function toggleIndentGuides(button) {
            if (editor.getDisplayIndentGuides()) {
                editor.setDisplayIndentGuides(false);
                $(button).removeClass('selected');
            }
            else {
                editor.setDisplayIndentGuides(true);
                $(button).addClass('selected');
            }
        }

        function toggleReadOnly(button) {
            if (editor.getReadOnly()) {
                editor.setReadOnly(false);
                $(button).removeClass('selected');
            }
            else {
                editor.setReadOnly(true);
                $(button).addClass('selected');
            }
        }

        function scrollToLine(textbox) {
            editor.scrollToLine(parseInt($(textbox).val()) - 1);
        }

        function toggleFindReplace(button) {
            if ($('#findReplaceToolbar').css('display') != "none") {
                $('#findReplaceToolbar').hide();
                $(button).removeClass('selected');
            }
            else {
                $('#findReplaceToolbar').show();
                $(button).addClass('selected');
            }
        }

        function toggleHighlightActiveLine() {
            if (editor.getHighlightActiveLine()) {
                editor.setHighlightActiveLine(false);
            }
            else {
                editor.setHighlightActiveLine(true);
            }
        }

        var findOptions = {};

        function setFindOptions(needle) {
            findOptions = {
                needle: needle,
                wrap: (($('#wrapSearch:checked').length > 0) ? true:false),
                caseSensitive: (($('#caseSensitive:checked').length > 0) ? true:false),
                wholeWord: (($('#wholeWord:checked').length > 0) ? true:false),
                regExp: (($('#regExp:checked').length > 0) ? true:false),
                skipCurrent: (($('#skipCurrent:checked').length > 0) ? true:false)
            };
        }

        function findPrev() {
            setFindOptions($('#findText').val());
            editor.findPrevious(findOptions, true);
        }

        function findNext() {
            setFindOptions($('#findText').val());
            editor.findNext(findOptions, true);
        }

        function replaceText() {
            setFindOptions($('#findText').val());
            editor.replace($('#replaceText').val(), findOptions);
        }

        function replaceAllText() {
            setFindOptions($('#findText').val());
            editor.replaceAll($('#replaceText').val(), findOptions);
        }

        function cancelOptions(button) {

        }

        function saveEditorOptions() {

        }

        function saveFindReplaceOptions() {

        }

        function createPage() {
	        var toSend = {
		        folder: $('.editor-folder.selected').attr('data-id'),
		        project: 0,
		        syntax: $('.editor-page.selected').attr('data-syntax')
	        }
	        
            $.post("{{ app.request.getUri }}create/", toSend, function(data) {
	        	var div = $("<div>");
	        	div.addClass('editor-page');
	        	div.attr('data-id', data.id);
	        	div.attr('data-folder', data.folder);
	        	div.attr('data-syntax', data.syntax);
	        	div.attr('data-project', data.project);	        	
	        	div.html('<div class="preview"></div><div class="date">' + data.date + '</div><div class="content"></div>');
	        	$('.editor-pages').append(div);
	        	
	        	div.click(function() {
	        		selectPage($(this));
	        	});
	        	
	        	div.trigger('click');
            });
        }
        
        function savePage() {
	        var selected = $('.editor-page.selected');
	        
	        var toSend = {
		        id: selected.attr('data-id'),
		        syntax: selected.attr('data-syntax'),
		        content: editor.getValue()
	        }
	        
            $.post("{{ app.request.getUri }}save/", toSend, function(data) {
	            updatePagePreview(data.previewContent);
            	//console.log(data);
            });
        }
        
        function removePage() {
	        if (confirm('Are you sure you want to remove this page?')) {
			    var selected = $('.editor-page.selected');
	        
		        var toSend = {
			        id: selected.attr('data-id')
		        }
		        
	            $.post("{{ app.request.getUri }}remove/", toSend, function(data) {
		            var previewSibling = selected.prev();
		            selected.remove();
					previewSibling.trigger('click');
	            	//console.log(data);
	            });
			} 
        }
        
        function selectPage(obj) {
	        var content = editor.getValue();
	        $('.editor-page.selected').find('.content').text(content);
	        
			$('.editor-page').removeClass('selected');
			obj.addClass('selected');
			
			var syntax = obj.attr('data-syntax');
			$('#mode').val(syntax);
			
			var content = obj.find('.content').text();
			editor.setValue(content);
        }
        
        function updatePagePreview(content) {
	        $('.editor-page.selected').find('.preview').text(content);
        }
        
        function createFolder() {
			var div = $("<div>");
        	div.addClass('editor-folder');
        	div.addClass('folder');
        	div.addClass('temp-new');
        	div.html('<input type="text" onkeyup="checkCreateFolderKeyDown(event, this)" id="newFolder" placeholder="Folder Name">');
        	$('.editor-folders.folders').append(div);
        	
        	$("#newFolder").focus();
	    }
	    
	    function checkCreateFolderKeyDown(event, obj) {
		    if (event.which == 13) {
	            sendCreateFolder(obj);
	        }
	        else if (event.which == 27) {
			    $('.editor-folder.temp-new').remove();
	        }
	    }
	        
	    function sendCreateFolder(obj) {
		    var div = $('.editor-folder.temp-new');
		    var name = $(obj).val();
		    
		    if (name != "") {
			    var toSend = {
			        name: name
		        }
			    
	            $.post("{{ app.request.getUri }}createFolder/", toSend, function(data) {
				    $(obj).remove();
				    
		            div.attr('data-id', data.id);
		            div.text(data.name);
					
					div.click(function() {
		        		selectFolder($(this));
		        	});
		        	
		        	div.removeClass('temp-new');
	            });
	        }
	        else {
			    div.remove();
	        }
        }
        
		function selectFolder(obj) {
			$('.editor-folder').removeClass('selected');
			obj.addClass('selected');
			
			var id = $(obj).attr('data-id');
			
			if (id == "-1") {
				$('.editor-page').show();
			}
			else {
				$('.editor-page').hide();
				$('.editor-page[data-folder=' + id + ']').show();
			}
			
			editor.setValue("");

			$('.editor-page:visible:first').trigger('click');
        }
        
		function removeFolder() {
		    var selected = $('.editor-folder.selected');
		    
		    if (selected.hasClass('folder')) {
		        if (confirm('Are you sure you want to remove this folder? Its contents will not be deleted.')) {
				    var toSend = {
				        id: selected.attr('data-id')
			        }
			        
		            $.post("{{ app.request.getUri }}removeFolder/", toSend, function(data) {
						var previewSibling = selected.prev();
			            selected.remove();
						previewSibling.trigger('click');
		            	//console.log(data);
		            });
			    }
			} 
			else {
				alert("You must selected a folder to remove it.");
			}
        }
    </script>
{% endblock %}